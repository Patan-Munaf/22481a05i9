{"ast":null,"code":"/**\r\n * Logging Middleware\r\n * Sends structured log data to the AffordMed test server logging API.\r\n * Must be called wherever logging is needed in your app.\r\n */\n\nconst LOG_API_URL = \"/evaluation-service/logs\";\n\n/**\r\n * Possible values for log attributes (must be lowercase)\r\n */\nconst VALID_STACKS = [\"backend\", \"frontend\"];\nconst VALID_LEVELS = [\"debug\", \"info\", \"warn\", \"error\", \"fatal\"];\nconst VALID_PACKAGES = [\"cache\", \"controller\", \"cron_job\", \"db\", \"domain\", \"handler\", \"repository\", \"route\", \"service\",\n// Backend only\n\"api\",\n// Frontend only\n\"component\", \"hook\", \"page\", \"state\", \"style\",\n// Frontend only\n\"auth\", \"config\", \"middleware\", \"utils\" // Both\n];\n\n/**\r\n * Log an event by sending a POST request to the log API.\r\n * @param {Object} params - Parameters for the log entry.\r\n * @param {string} params.stack - Must be \"backend\" or \"frontend\".\r\n * @param {string} params.level - One of the valid log levels.\r\n * @param {string} params.package - One of the valid packages.\r\n * @param {string} params.message - Descriptive log message.\r\n * @param {string} params.token - Authorization token for API access.\r\n */\nexport async function logEvent({\n  stack,\n  level,\n  package: pkg,\n  message,\n  token\n}) {\n  // Validate inputs before sending\n  if (!VALID_STACKS.includes(stack.toLowerCase())) {\n    throw new Error(`Invalid stack value '${stack}'. Must be 'backend' or 'frontend'.`);\n  }\n  if (!VALID_LEVELS.includes(level.toLowerCase())) {\n    throw new Error(`Invalid level value '${level}'. Must be one of ${VALID_LEVELS.join(\", \")}.`);\n  }\n  if (!VALID_PACKAGES.includes(pkg.toLowerCase())) {\n    throw new Error(`Invalid package value '${pkg}'. Must be one of ${VALID_PACKAGES.join(\", \")}.`);\n  }\n  if (!token) {\n    throw new Error(\"Authorization token is required.\");\n  }\n\n  // Prepare payload\n  const payload = {\n    stack: stack.toLowerCase(),\n    level: level.toLowerCase(),\n    package: pkg.toLowerCase(),\n    message\n  };\n  try {\n    // Send log to server\n    const response = await fetch(LOG_API_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify(payload)\n    });\n    if (!response.ok) {\n      console.error(\"Failed to send log:\", await response.text());\n    }\n  } catch (error) {\n    // Silently fail to avoid disrupting app usability\n  }\n}","map":{"version":3,"names":["LOG_API_URL","VALID_STACKS","VALID_LEVELS","VALID_PACKAGES","logEvent","stack","level","package","pkg","message","token","includes","toLowerCase","Error","join","payload","response","fetch","method","headers","body","JSON","stringify","ok","console","error","text"],"sources":["C:/munna/22481a05i9/frontend-test-submission/src/logger.js"],"sourcesContent":["/**\r\n * Logging Middleware\r\n * Sends structured log data to the AffordMed test server logging API.\r\n * Must be called wherever logging is needed in your app.\r\n */\r\n\r\nconst LOG_API_URL = \"/evaluation-service/logs\";\r\n\r\n/**\r\n * Possible values for log attributes (must be lowercase)\r\n */\r\nconst VALID_STACKS = [\"backend\", \"frontend\"];\r\nconst VALID_LEVELS = [\"debug\", \"info\", \"warn\", \"error\", \"fatal\"];\r\nconst VALID_PACKAGES = [\r\n  \"cache\", \"controller\", \"cron_job\", \"db\", \"domain\", \r\n  \"handler\", \"repository\", \"route\", \"service\", // Backend only\r\n  \"api\", // Frontend only\r\n  \"component\", \"hook\", \"page\", \"state\", \"style\", // Frontend only\r\n  \"auth\", \"config\", \"middleware\", \"utils\" // Both\r\n];\r\n\r\n/**\r\n * Log an event by sending a POST request to the log API.\r\n * @param {Object} params - Parameters for the log entry.\r\n * @param {string} params.stack - Must be \"backend\" or \"frontend\".\r\n * @param {string} params.level - One of the valid log levels.\r\n * @param {string} params.package - One of the valid packages.\r\n * @param {string} params.message - Descriptive log message.\r\n * @param {string} params.token - Authorization token for API access.\r\n */\r\nexport async function logEvent({ stack, level, package: pkg, message, token }) {\r\n  // Validate inputs before sending\r\n  if (!VALID_STACKS.includes(stack.toLowerCase())) {\r\n    throw new Error(`Invalid stack value '${stack}'. Must be 'backend' or 'frontend'.`);\r\n  }\r\n  if (!VALID_LEVELS.includes(level.toLowerCase())) {\r\n    throw new Error(`Invalid level value '${level}'. Must be one of ${VALID_LEVELS.join(\", \" )}.`);\r\n  }\r\n  if (!VALID_PACKAGES.includes(pkg.toLowerCase())) {\r\n    throw new Error(`Invalid package value '${pkg}'. Must be one of ${VALID_PACKAGES.join(\", \" )}.`);\r\n  }\r\n  if (!token) {\r\n    throw new Error(\"Authorization token is required.\");\r\n  }\r\n\r\n  // Prepare payload\r\n  const payload = {\r\n    stack: stack.toLowerCase(),\r\n    level: level.toLowerCase(),\r\n    package: pkg.toLowerCase(),\r\n    message\r\n  };\r\n\r\n  try {\r\n    // Send log to server\r\n    const response = await fetch(LOG_API_URL, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Failed to send log:\", await response.text());\r\n    }\r\n  } catch (error) {\r\n    // Silently fail to avoid disrupting app usability\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,WAAW,GAAG,0BAA0B;;AAE9C;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC;AAC5C,MAAMC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC;AAChE,MAAMC,cAAc,GAAG,CACrB,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EACjD,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS;AAAE;AAC7C,KAAK;AAAE;AACP,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO;AAAE;AAC/C,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC;AAAA,CACzC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,QAAQA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,OAAO,EAAEC,GAAG;EAAEC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAC7E;EACA,IAAI,CAACT,YAAY,CAACU,QAAQ,CAACN,KAAK,CAACO,WAAW,CAAC,CAAC,CAAC,EAAE;IAC/C,MAAM,IAAIC,KAAK,CAAC,wBAAwBR,KAAK,qCAAqC,CAAC;EACrF;EACA,IAAI,CAACH,YAAY,CAACS,QAAQ,CAACL,KAAK,CAACM,WAAW,CAAC,CAAC,CAAC,EAAE;IAC/C,MAAM,IAAIC,KAAK,CAAC,wBAAwBP,KAAK,qBAAqBJ,YAAY,CAACY,IAAI,CAAC,IAAK,CAAC,GAAG,CAAC;EAChG;EACA,IAAI,CAACX,cAAc,CAACQ,QAAQ,CAACH,GAAG,CAACI,WAAW,CAAC,CAAC,CAAC,EAAE;IAC/C,MAAM,IAAIC,KAAK,CAAC,0BAA0BL,GAAG,qBAAqBL,cAAc,CAACW,IAAI,CAAC,IAAK,CAAC,GAAG,CAAC;EAClG;EACA,IAAI,CAACJ,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CAAC,kCAAkC,CAAC;EACrD;;EAEA;EACA,MAAME,OAAO,GAAG;IACdV,KAAK,EAAEA,KAAK,CAACO,WAAW,CAAC,CAAC;IAC1BN,KAAK,EAAEA,KAAK,CAACM,WAAW,CAAC,CAAC;IAC1BL,OAAO,EAAEC,GAAG,CAACI,WAAW,CAAC,CAAC;IAC1BH;EACF,CAAC;EAED,IAAI;IACF;IACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACjB,WAAW,EAAE;MACxCkB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUT,KAAK;MAClC,CAAC;MACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAE,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC;IAC7D;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACd;EAAA;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}